{"version":3,"sources":["components/Button/index.js","pages/Home.js","pages/Load.js","pages/RandomNumber.js","pages/GameOver.js","pages/HowToPlay.js","pages/EasterEgg.js","Routes.js","App.js","serviceWorker.js","index.js"],"names":["Button","to","btnClass","textValue","className","Home","id","href","Load","useState","loadTime","setLoadTime","timer","useEffect","setTimeout","RandomNumber","number","setNumber","min","max","aux","limit","setLimit","attempt","setAttempt","getRandomNumber","randomNumber","Math","round","random","onClick","GameOver","match","params","att","HowToPlay","EasterEgg","class","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.274d6b40.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport './styles.css';\n\nconst Button = ({ to, btnClass, textValue }) => {\n\treturn <Link to={to} className={btnClass}>{textValue}</Link>;\n}\n\nexport default Button;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport \"../styles/home.css\";\n\n//Components\nimport Button from '../components/Button';\n\nconst Home = () => (\n \t<div id=\"page-home\" className=\"screen\">\n\t\t<p id=\"header\">Created by <a className=\"link\" href=\"https://github.com/HermersonDev\">@hdev_</a></p>\n\t\t\n\t\t<div id=\"main\">\n\t\t\t<h1>MyRandom<br/>Number</h1>\n\t\t\t<Button to=\"/load\" btnClass=\"btn\" textValue=\"PLAY!\"/>\n\t\t</div>\n\n\t\t<Link id=\"link-footer\" className=\"link\" to=\"/how-to-play\">How to play?</Link>\n\n\t\t<p id=\"number-0\">0</p>\n\t\t<p id=\"number-1\">1</p>\n\t\t<p id=\"number-2\">2</p>\n\t\t<p id=\"number-3\">3</p>\n\t\t<p id=\"number-4\">4</p>\n\t\t<p id=\"number-5\">5</p>\n\t\t<p id=\"number-6\">6</p>\n\t\t<p id=\"number-7\">7</p>\n\t\t<p id=\"number-8\">8</p>\n\t\t<p id=\"number-9\">9</p>\n\t\t\n\t</div>\n);\n\nexport default Home;","import React, { useState, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\n\nimport '../styles/load.css';\n\nconst Load = () => {\n\tconst [loadTime, setLoadTime] = useState(10);\n\n\tuseEffect(() => {\n\n\t\tif (loadTime > 0)\n\t\t\tsetTimeout(timer, 1000);\n\n\t}, [loadTime]);\n\n\tfunction timer() {\n\t\tsetLoadTime(loadTime - 1);\n\t}\n\n\tif (loadTime === 0)\n\t\treturn <Redirect to=\"/random-number\" />\n\n\treturn (\n\t\t<div id=\"load-page\" className=\"screen\">\n\t\t\t<h1 id=\"number-count\">{loadTime}</h1>\n\t\t\t<p>Think of a number <br/> from 0 to 100!</p>\n\t\t</div>\n\t);\n};\n\nexport default Load;","import React, { useState, useEffect }from 'react';\nimport { Link, Redirect } from 'react-router-dom';\n\nimport '../styles/random-number.css';\n\nconst RandomNumber = () => {\n\tconst [number, setNumber] = useState();\n\tconst [limit, setLimit] = useState({ min: 0, max: 100, aux: 100 });\n\tconst [attempt, setAttempt] = useState(1);\n\n\tuseEffect(() => {\n\t\tgetRandomNumber();\n\n\t}, [limit, attempt]);\n\n\tfunction smaller() {\n\t\tsetLimit({\n\t\t\tmin: limit.min,\n\t\t\tmax: number,\n\t\t\taux: number\n\t\t});\n\t\tsetAttempt(attempt + 1);\n\t\tgetRandomNumber();\n\t}\n\n\tfunction bigger() {\n\t\tsetLimit({\n\t\t\tmin: number,\n\t\t\tmax: limit.max,\n\t\t\taux: number\n\t\t});\n\t\tsetAttempt(attempt + 1);\n\t\tgetRandomNumber();\n\t}\n\n\tfunction getRandomNumber() {\n\t\tconst randomNumber = Math.round(Math.random() * (limit.max - limit.min) + limit.min);\n\t\tsetNumber(randomNumber);\n\t};\n\n\t if (limit.min === limit.aux && limit.max === limit.aux)\n\t \treturn <Redirect to=\"/u-are-a-joker\" />\n\n\treturn (\n\t\t<div id=\"random-number-page\" className=\"screen\">\n\t\t\t<p>Is this your number?</p>\n\t\t\t<p id=\"number\">{number}</p>\n\t\t\t<div id=\"actions\">\n\t\t\t\t<button onClick={smaller} className=\"btn-action\">\n\t\t\t\t\tIt's smaller\n\t\t\t\t</button>\n\t\t\t\t<Link to={`/game-over/${attempt}`} className=\"btn-action btn-action-primary\">Yes!</Link>\n\t\t\t\t<button onClick={bigger} className=\"btn-action\">\n\t\t\t\t\tIt's bigger\n\t\t\t\t</button>\n\t\t\t</div>\t\t\n\t\t</div>\n\t);\n}\n\nexport default RandomNumber;","import React from 'react';\n\nimport '../styles/game-over.css';\n\n// Components\nimport Button from '../components/Button';\n\nconst GameOver = ({ match }) => (\n\t<div id=\"game-over-page\" className=\"screen\">\n\t\t<div id=\"play-again\">\n\t\t\t<p>Nice!</p>\n\t\t\t<Button to=\"/load\" btnClass=\"btn btn-primary\" textValue=\"PLAY AGAIN!\" />\n\t\t</div>\n\t\t<p id=\"attempts\"> {match.params.att} Attempts </p>\n\t</div>\n);\n\nexport default GameOver;","import React from 'react';\n\nimport '../styles/how-to-play.css';\n\n//Components\nimport Button from '../components/Button';\n\nconst HowToPlay = () => (\n\t<div id=\"how-to-play-page\" className=\"screen\">\n\t\t<div id=\"en\">\n\t\t\t<p>EN</p>\n\t\t\t<p>This game is quite simple, just think of a number from 0 to 100. Then the algorithm will try to guess. :)</p>\n\t\t</div>\n\t\t<div id=\"pt\">\n\t\t\t<p>PT</p>\n\t\t\t<p>Este jogo é bastante simples, basta pensar em um número de 0 a 100. Então o algoritmo tentará adivinhar. :)</p>\n\t\t</div>\n\t\t<Button to=\"/\" btnClass=\"btn\" textValue=\"BACK\" />\n\t</div>\n);\n\nexport default HowToPlay;","import React from 'react';\n\nimport '../styles/easter-egg.css';\n\nconst EasterEgg = () => (\n\t<div id=\"easter-egg-page\" class=\"screen\">\n\t\t<p id=\"easter-egg\">Easter Egg</p>\n\t\t<p>You are a Joker !</p>\n\t</div>\n);\n\nexport default EasterEgg;\n","import React from 'react';\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom';\n\n// Pages \nimport Home from './pages/Home';\nimport Load from './pages/Load';\nimport RandomNumber from './pages/RandomNumber';\nimport GameOver from './pages/GameOver';\nimport HowToPlay from './pages/HowToPlay';\nimport EasterEgg from './pages/EasterEgg';\n\nconst Routes = () => (\n\t<Router>\n\t\t<Switch>\n\t\t\t<Route exact path=\"/\" component={Home} />\n\t\t\t<Route path=\"/load\" component={Load} />\n\t\t\t<Route path=\"/random-number\" component={RandomNumber} />\n\t\t\t<Route path=\"/game-over/:att\" component={GameOver} />\n\t\t\t<Route path=\"/how-to-play\" component={HowToPlay} />\n\t\t\t<Route path=\"/u-are-a-joker\" component={EasterEgg} />\n\t\t</Switch>\n\t</Router>\n);\n\nexport default Routes;","import React from 'react';\n\nimport Routes from './Routes';\n\nfunction App() {\n  return <Routes />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}